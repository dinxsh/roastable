"use client";

import React, { useState } from "react";

const APP_NAME = "Roastable";
const TAGLINE = "Because everyone deserves to be internet-famous for a minute â€” or roasted for eternity.";
const ONE_LINER = "Get Roasted by AI. Then roast your frens back ðŸ˜ˆðŸ”¥";
const DESCRIPTION =
  "Roastable is a turbo-viral Farcaster mini app that turns your profile into a hilarious â€˜Roast Cardâ€™ or â€˜Hype Cardâ€™, generated by AI and designed for maximum shareability. Log in, click once, and boom â€” your cardâ€™s ready to blow up your feed. Share yours. Tag friends. Laugh at your own bio. Get humbled (or hyped) by machine learning.";

export default function Home() {
  const [mode, setMode] = useState('roast');
  const [cardText, setCardText] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [errorStack, setErrorStack] = useState(null);

  // Placeholder for card preview
  const cardPreview = (
    <div className="card-vaporwave w-full max-w-md min-h-[220px] flex flex-col items-center justify-center mt-8">
      <span className="text-2xl mb-2">{mode === 'roast' ? 'ðŸ”¥ Roast Card' : 'ðŸš€ Hype Card'}</span>
      <span className="text-base text-center opacity-80">{cardText || `Your {mode} will appear here!`}</span>
    </div>
  );

  const handleGenerate = async () => {
    setLoading(true);
    setError(null);
    setErrorStack(null);
    setCardText('');
    try {
      // Example payload, replace with real user data as needed
      const payload = {
        username: 'testuser',
        bio: 'This is a test bio.',
        topics: 'AI, blockchain',
        followerCount: 123,
        mode,
      };
      const res = await fetch('/api/generate-card', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      const data = await res.json();
      if (!res.ok) {
        // Log error and stack to browser console
        console.error('API Error:', data.error);
        if (data.stack) {
          console.error('API Stack Trace:', data.stack);
        }
        setError(data.error || 'An unknown error occurred.');
        setErrorStack(data.stack || null);
        setCardText('');
      } else {
        setCardText(data.text);
      }
    } catch (err) {
      // Log unexpected errors
      console.error('Unexpected error:', err);
      setError(err.message || 'An unexpected error occurred.');
      setErrorStack(err.stack || null);
      setCardText('');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen py-10 px-4 bg-background text-foreground">
      <h1 className="text-4xl font-extrabold font-sans text-primary mb-2 drop-shadow">{APP_NAME}</h1>
      <p className="text-lg font-semibold text-accent mb-2 text-center">{TAGLINE}</p>
      <p className="text-base font-sans text-secondary mb-6 text-center">{ONE_LINER}</p>
      <p className="max-w-xl text-center mb-8 text-foreground/80">{DESCRIPTION}</p>
      <div className="flex gap-4 mb-6">
        <button
          className={`px-4 py-2 rounded-full font-bold border-2 transition-colors ${mode === 'roast' ? 'bg-primary text-background border-primary' : 'bg-background text-primary border-primary'}`}
          onClick={() => setMode('roast')}
        >
          Roast Mode
        </button>
        <button
          className={`px-4 py-2 rounded-full font-bold border-2 transition-colors ${mode === 'hype' ? 'bg-secondary text-background border-secondary' : 'bg-background text-secondary border-secondary'}`}
          onClick={() => setMode('hype')}
        >
          Hype Mode
        </button>
      </div>
      <button
        className="mt-2 px-8 py-3 rounded-full bg-accent text-background font-bold text-lg shadow-card hover:scale-105 transition-transform"
        disabled={loading}
        onClick={handleGenerate}
      >
        {loading ? 'Generating...' : 'Generate My Card'}
      </button>
      {error && (
        <div className="mt-6 p-4 bg-red-100 text-red-800 rounded-lg max-w-md w-full">
          <strong>Error:</strong> {error}
          {errorStack && (
            <details className="mt-2 whitespace-pre-wrap">
              <summary>Stack Trace</summary>
              {errorStack}
            </details>
          )}
        </div>
      )}
      {cardPreview}
    </div>
  );
}
